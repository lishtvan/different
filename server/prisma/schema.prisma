datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  providerId       String   @unique
  email            String?
  nickname         String?  @unique @db.VarChar(20)
  bio              String?
  avatarUrl        String?
  location         String?
  phone            String?
  cardNumber       String?
  isBill           Boolean?
  npCityRef        String?
  npCityName       String?
  npDepartmentRef  String?
  npDepartmentName String?
  firstName        String?
  lastName         String?
  pushToken        String?

  Sessions          Session[]
  Listings          Listing[]
  Chats             Chat[]
  buyOrders         Order[]             @relation("Buyer")
  sellOrders        Order[]             @relation("Seller")
  Messages          Message[]           @relation("Sender")
  ChatNotification  ChatNotification[]
  OrderNotification OrderNotification[]
}

model Session {
  id     Int    @id @default(autoincrement())
  token  String @unique
  ip     String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
}

enum ListingStatus {
  AVAILABLE
  SOLD
  ORDER
}

model Listing {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  price       Int
  title       String
  size        String
  designer    String
  condition   String
  category    String
  description String?
  tags        String[]
  imageUrls   String[]
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status      ListingStatus @default(AVAILABLE)
  userId      Int
  Order       Order?
}

enum OrderStatus {
  PAYMENT
  HANDLING
  SHIPPING
  FINISHED
  CANCELED
}

model Order {
  id                String              @id @default(uuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  status            OrderStatus         @default(PAYMENT)
  trackingNumber    String              @unique
  intDocRef         String?             @unique
  buyer             User                @relation(name: "Buyer", fields: [buyerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  buyerId           Int
  seller            User                @relation(name: "Seller", fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId          Int
  Listing           Listing             @relation(fields: [listingId], references: [id])
  listingId         Int                 @unique
  OrderNotification OrderNotification[]
}

model Message {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  Chat                Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId              String
  text                String
  Sender              User     @relation(name: "Sender", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId            Int
  relatedListingId    String?
  relatedListingTitle String?
}

model Chat {
  id               String             @id @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  Users            User[]
  Messages         Message[]
  ChatNotification ChatNotification[]
}

model ChatNotification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  Chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    String
}

model OrderNotification {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  Int
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}
