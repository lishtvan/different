datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  providerId String    @unique
  nickname   String?   @unique @db.VarChar(20)
  bio        String?
  avatarUrl  String?
  location   String?
  phone      String?
  Sessions   Session[]
  Listings   Listing[]
  Chats      Chat[]
  Order      Order[]
}

model Session {
  id     Int    @id @default(autoincrement())
  token  String @unique
  ip     String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
}

enum ListingStatus {
  AVAILABLE
  SOLD
  ORDER
}

model Listing {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  price       Int
  cardNumber  String
  title       String
  size        String
  designer    String
  condition   String
  category    String
  description String?
  tags        String[]
  imageUrls   String[]
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status      ListingStatus @default(AVAILABLE)
  userId      Int
  Order       Order[]
  phone       String
}

enum OrderStatus {
  PAYMENT
  HANDLING
  SHIPPING
  COMMISSION
  FINISHED
}

model Order {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now()) @updatedAt
  status         OrderStatus @default(PAYMENT)
  listing        Listing     @relation(fields: [listingId], references: [id])
  listingId      Int
  trackingNumber String
  buyer          User        @relation(fields: [buyerId], references: [id])
  buyerId        Int
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  Chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId    String
  text      String
  senderId  Int
}

model Chat {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  notification Boolean   @default(false)
  Users        User[]
  Messages     Message[]
}
